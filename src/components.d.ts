/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AvatarSizes } from "./types";
export namespace Components {
    interface EAvatar {
        "color": string;
        "outlined": boolean;
        "size": AvatarSizes;
        "text"?: string;
    }
    interface EBtn {
        /**
          * Append icon
         */
        "appendIcon"?: string;
        /**
          * Disable button
         */
        "disabled"?: boolean;
        /**
          * Turn button into the icon button
         */
        "icon"?: boolean;
        /**
          * Prepend icon
         */
        "prependIcon"?: string;
        /**
          * Make button edges rounded
         */
        "rounded"?: boolean;
        /**
          * Button size
         */
        "size"?: "xs" | "sm" | "md" | "lg" | "xl" | "xll";
    }
    interface ECheckbox {
        "indeterminate": boolean;
    }
    interface EIcon {
        /**
          * Color of the icon
         */
        "color": string;
        /**
          * Icon from Phosphor Icons library
         */
        "icon": string;
        /**
          * Size of the icon
         */
        "size": string;
    }
    interface ERadio {
    }
    interface SimpleConfig {
        /**
          * A simple number field
         */
        "aNumber": number;
        /**
          * Another number field
         */
        "bNumber": number;
        /**
          * A string field which represents a color
         */
        "backgroundColor": string;
        /**
          * A boolean field
         */
        "isChecked": boolean;
        /**
          * A poorly named field which should hold a color value
         */
        "poorlyNamedProp": string;
        /**
          * A simple text field
         */
        "simpleText": string;
        /**
          * A date field
         */
        "startDate": string;
    }
}
declare global {
    interface HTMLEAvatarElement extends Components.EAvatar, HTMLStencilElement {
    }
    var HTMLEAvatarElement: {
        prototype: HTMLEAvatarElement;
        new (): HTMLEAvatarElement;
    };
    interface HTMLEBtnElement extends Components.EBtn, HTMLStencilElement {
    }
    var HTMLEBtnElement: {
        prototype: HTMLEBtnElement;
        new (): HTMLEBtnElement;
    };
    interface HTMLECheckboxElement extends Components.ECheckbox, HTMLStencilElement {
    }
    var HTMLECheckboxElement: {
        prototype: HTMLECheckboxElement;
        new (): HTMLECheckboxElement;
    };
    interface HTMLEIconElement extends Components.EIcon, HTMLStencilElement {
    }
    var HTMLEIconElement: {
        prototype: HTMLEIconElement;
        new (): HTMLEIconElement;
    };
    interface HTMLERadioElement extends Components.ERadio, HTMLStencilElement {
    }
    var HTMLERadioElement: {
        prototype: HTMLERadioElement;
        new (): HTMLERadioElement;
    };
    interface HTMLSimpleConfigElement extends Components.SimpleConfig, HTMLStencilElement {
    }
    var HTMLSimpleConfigElement: {
        prototype: HTMLSimpleConfigElement;
        new (): HTMLSimpleConfigElement;
    };
    interface HTMLElementTagNameMap {
        "e-avatar": HTMLEAvatarElement;
        "e-btn": HTMLEBtnElement;
        "e-checkbox": HTMLECheckboxElement;
        "e-icon": HTMLEIconElement;
        "e-radio": HTMLERadioElement;
        "simple-config": HTMLSimpleConfigElement;
    }
}
declare namespace LocalJSX {
    interface EAvatar {
        "color"?: string;
        "outlined"?: boolean;
        "size"?: AvatarSizes;
        "text"?: string;
    }
    interface EBtn {
        /**
          * Append icon
         */
        "appendIcon"?: string;
        /**
          * Disable button
         */
        "disabled"?: boolean;
        /**
          * Turn button into the icon button
         */
        "icon"?: boolean;
        /**
          * Prepend icon
         */
        "prependIcon"?: string;
        /**
          * Make button edges rounded
         */
        "rounded"?: boolean;
        /**
          * Button size
         */
        "size"?: "xs" | "sm" | "md" | "lg" | "xl" | "xll";
    }
    interface ECheckbox {
        "indeterminate"?: boolean;
    }
    interface EIcon {
        /**
          * Color of the icon
         */
        "color"?: string;
        /**
          * Icon from Phosphor Icons library
         */
        "icon"?: string;
        /**
          * Size of the icon
         */
        "size"?: string;
    }
    interface ERadio {
    }
    interface SimpleConfig {
        /**
          * A simple number field
         */
        "aNumber"?: number;
        /**
          * Another number field
         */
        "bNumber"?: number;
        /**
          * A string field which represents a color
         */
        "backgroundColor"?: string;
        /**
          * A boolean field
         */
        "isChecked"?: boolean;
        /**
          * A poorly named field which should hold a color value
         */
        "poorlyNamedProp"?: string;
        /**
          * A simple text field
         */
        "simpleText"?: string;
        /**
          * A date field
         */
        "startDate"?: string;
    }
    interface IntrinsicElements {
        "e-avatar": EAvatar;
        "e-btn": EBtn;
        "e-checkbox": ECheckbox;
        "e-icon": EIcon;
        "e-radio": ERadio;
        "simple-config": SimpleConfig;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "e-avatar": LocalJSX.EAvatar & JSXBase.HTMLAttributes<HTMLEAvatarElement>;
            "e-btn": LocalJSX.EBtn & JSXBase.HTMLAttributes<HTMLEBtnElement>;
            "e-checkbox": LocalJSX.ECheckbox & JSXBase.HTMLAttributes<HTMLECheckboxElement>;
            "e-icon": LocalJSX.EIcon & JSXBase.HTMLAttributes<HTMLEIconElement>;
            "e-radio": LocalJSX.ERadio & JSXBase.HTMLAttributes<HTMLERadioElement>;
            "simple-config": LocalJSX.SimpleConfig & JSXBase.HTMLAttributes<HTMLSimpleConfigElement>;
        }
    }
}
